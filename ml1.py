# -*- coding: utf-8 -*-
"""ML1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18T4yYOhUucCdkY3BekiYHn8hyLlp6_AM
"""

import numpy as np
import matplotlib.pyplot as plot
import pandas as pd

x=[1,2,3,4,5,6,7]
y=[9,8,10,12,11,13,14]
df=pd.DataFrame(
    {
      'x':x,
      'y':y
    }

)
print(df)

#collect the values of x and y
x=df['x'].values
y=df['y'].values

#mean of x and y ---- b1 and b0 = m and c
mean_x=np.mean(x)
mean_y=np.mean(y)

#total number of values
m=len(x)

numer=0
denom=0

for i in range(m):
  numer +=(y[i]*x[i])-(mean_y*x[i])
  denom +=(x[i]*x[i])-(mean_x*x[i])
b1= numer/denom
b0= mean_y- (b1*mean_x)

print(b1,b0)

plot.xlabel("X")
plot.ylabel("Y")
plot.plot(x,y,'o')
b0,b1 = np.polyfit(x,y,1)
plot.plot(x,b0*x+b1)
plot.legend()
plot.show()

theta = np.zeros((7,1))

def cost_func(x,y,theta):
  m=len(y)
  y_pred=x.dot(theta)
  error=(y_pred-y)**2
  return 1/(2*m)*np.sum(error)

def gradient_descent(x,y,theta,alpha,iterations):
  m=len(y)
  costs=[]
  for i in range(iterations):
    y_pred=x.dot(theta)
    error=np.dot(x.transpose(),(y_pred-y))
    theta=alpha*1/m*error
    costs.append(cost_func(x,y,theta))
    return theta,costs

gradient_descent(x,y,theta,0.1,10)

def predict(x, theta):
  y_pred = np.dot(theta.transpose(), x)
  return y_pred

plot.figure(figsize=(12,6))
plot.plot(x,y_pred)
plot.plot(x,y,'ro')
plot.show()

data = pd.read_csv('/content/drive/MyDrive/foodtruck.txt')
data.head(5)